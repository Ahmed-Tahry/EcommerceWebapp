version: '3.8'

volumes:
  postgres_data:
    driver: local

services:
  postgres-db:
    image: postgres:13
    container_name: postgres-db-keycloak
    environment:
      POSTGRES_DB: keycloak
      POSTGRES_USER: keycloakadmin
      POSTGRES_PASSWORD: StrongPassword123!
    volumes:
      - postgres_data:/var/lib/postgresql/data
    ports: # Optional: Expose PostgreSQL port for debugging, not needed for Keycloak internal connection
      - "5432:5432"
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U keycloakadmin -d keycloak"]
      interval: 10s
      timeout: 5s
      retries: 5

  keycloak:
    build: ./keycloak_config
    container_name: keycloak-server
    ports:
      # Map host port 8443 to container port 8443 for HTTPS
      - "8443:8443"
      # Optionally, map host port 8080 to container port 8080 for HTTP (if KC_HTTP_ENABLED=true)
      - "8080:8080"
    environment:
      # Admin credentials are set in the Dockerfile
      # Database configuration (KC_DB) is set in the Dockerfile to 'postgres'
      # HTTPS certificate paths are set in the Dockerfile

      # PostgreSQL connection details
      KC_DB_URL: jdbc:postgresql://postgres-db/keycloak # 'postgres-db' is the service name of the PostgreSQL container
      KC_DB_USERNAME: keycloakadmin # Must match POSTGRES_USER in postgres-db service
      KC_DB_PASSWORD: StrongPassword123! # Must match POSTGRES_PASSWORD in postgres-db service
      KC_DB_SCHEMA: public # Default schema for PostgreSQL

      # KC_HOSTNAME: localhost # Example, if your cert is for 'localhost'
      # KC_HOSTNAME_STRICT_HTTPS: "false" # Already set in Dockerfile
      # KC_HTTP_ENABLED: "true" # Already set in Dockerfile
      KC_PROXY: edge # Recommended if running behind a reverse proxy
    volumes:
      # Mount SSL certificate and private key
      # Create ./certs/tls.crt and ./certs/tls.key (e.g., self-signed for testing)
      - ./certs/tls.crt:/etc/x509/https/tls.crt:ro
      - ./certs/tls.key:/etc/x509/https/tls.key:ro
    depends_on:
      postgres-db:
        condition: service_healthy # Wait for postgres-db to be healthy
    healthcheck:
      # Keycloak's Quarkus health endpoint
      test: ["CMD", "curl", "-f", "http://localhost:8080/q/health/ready"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 30s
networks:
  default:
    name: keycloak_network
# Define the top-level volumes section (already added above for clarity)
# volumes:
#   postgres_data:
#     driver: local
