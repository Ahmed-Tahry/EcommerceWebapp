events {
    worker_connections 1024;
}

http {
    lua_package_path "/usr/local/openresty/lualib/?.lua;;"; # Adjust if your path is different
    resolver 127.0.0.11;  # Docker's internal DNS, adjust if not using Docker's default

    # Keycloak OpenIDC options (can be defined once if mostly shared)
    # These are illustrative; you'd populate them from your actual Keycloak setup.
    # Note: client_secret is empty for public clients. If your KC client for Nginx is confidential, provide secret.
    # This lua_shared_dict can be used by resty.openidc to cache discovery results and JWKs
    lua_shared_dict openidc_cache 10m;


    # Upstream definitions for your microservices
    upstream settings_service_upstream {
        # Assumes settings_service is resolvable by this name (e.g., Docker service name)
        # and listens on port 3001 (as configured in settings_service/.env)
        server settings_service:3001;
    }

    upstream shop_service_upstream {
        # Assumes shop_service is resolvable and listens on port 3000 (default for many Node apps)
        # Adjust if your shop_service runs on a different port.
        server shop_service:3000;
    }

    # Optional: If you have a frontend application server
    # upstream frontend_upstream {
    #     server frontend_app:80; # or whatever your frontend serves on
    # }


    server {
        listen 80;
        server_name localhost; # Or your actual domain

        # Default behavior: serve frontend or a default page
        # location / {
        #     proxy_pass http://frontend_upstream;
        #     proxy_set_header Host $host;
        #     proxy_set_header X-Real-IP $remote_addr;
        #     proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        #     proxy_set_header X-Forwarded-Proto $scheme;
        # }

        # Health check - remains accessible without auth
        location /health {
            return 200 "OK";
        }

        # Reusable authentication block - define it once if possible, or repeat if opts vary significantly
        # This is a conceptual placement; Lua blocks are part of location directives.
        # The access_by_lua_block will be used in specific API locations below.

        # API endpoint for Settings Service
        location /api/settings/ {
            access_by_lua_block {
                local opts = {
                    discovery = "http://keycloak-server:8080/realms/myapp-realm/.well-known/openid-configuration", -- Your Keycloak discovery URL
                    client_id = "myapp-api", -- Your Keycloak client ID for Nginx/API Gateway
                    client_secret = "",  -- Keep empty for public client, or provide if confidential
                    ssl_verify = "no",    -- "yes" in production with valid certs
                    token_signing_alg_values_expected = "RS256", -- Or your expected alg
                    accept_none_alg = false,
                    scope = "openid profile email", -- Adjust scope as needed
                    redirect_uri = "http://localhost/auth/callback", -- A valid redirect URI for your Nginx client in Keycloak, though not directly used in bearer_jwt_verify
                    session_checks_enabled = false, -- Typically false for API gateway token validation
                    introspection_endpoint_auth_method = "client_secret_basic", -- if using introspection and confidential client
                    use_jwks_uri = true, -- Recommended
                    cache_jwks_uri = true, -- Recommended
                    cache_userinfo = true, -- Recommended
                    renew_access_token_on_expiry = false -- API gateway usually just validates
                }

                -- Validate JWT from Authorization header
                local res, err = require("resty.openidc").bearer_jwt_verify(opts)
                if err then
                    ngx.log(ngx.ERR, "JWT validation failed for /api/settings/: ", err)
                    ngx.exit(ngx.HTTP_UNAUTHORIZED)
                    return
                end

                -- Forward claims to microservice
                ngx.req.set_header("X-User-ID", res.sub or "")
                ngx.req.set_header("X-User-Roles", table.concat(res.realm_access and res.realm_access.roles or {}, ","))
                ngx.req.set_header("X-Authenticated-User", res.preferred_username or res.sub or "") -- Example
            }

            # Rewrite the URL to remove the /api/settings prefix before proxying
            rewrite ^/api/settings/(.*)$ /$1 break;

            proxy_pass http://settings_service_upstream;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
            # proxy_set_header Authorization $http_authorization; # Forward original Auth header if service needs it (less common if Nginx handles auth fully)

        }

        # API endpoint for Shop Service
        location /api/shop/ {
            access_by_lua_block {
                local opts = {
                    discovery = "http://keycloak-server:8080/realms/myapp-realm/.well-known/openid-configuration",
                    client_id = "myapp-api",
                    client_secret = "",
                    ssl_verify = "no",
                    token_signing_alg_values_expected = "RS256",
                    accept_none_alg = false,
                    scope = "openid profile email",
                    redirect_uri = "http://localhost/auth/callback",
                    session_checks_enabled = false,
                    use_jwks_uri = true,
                    cache_jwks_uri = true,
                    cache_userinfo = true,
                    renew_access_token_on_expiry = false
                }
                local res, err = require("resty.openidc").bearer_jwt_verify(opts)
                if err then
                    ngx.log(ngx.ERR, "JWT validation failed for /api/shop/: ", err)
                    ngx.exit(ngx.HTTP_UNAUTHORIZED)
                    return
                end
                ngx.req.set_header("X-User-ID", res.sub or "")
                ngx.req.set_header("X-User-Roles", table.concat(res.realm_access and res.realm_access.roles or {}, ","))
                ngx.req.set_header("X-Authenticated-User", res.preferred_username or res.sub or "")
            }

            rewrite ^/api/shop/(.*)$ /$1 break;

            proxy_pass http://shop_service_upstream;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
        }

        # Add other locations for other services or frontend static assets as needed
    }
}
