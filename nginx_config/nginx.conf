events {
    worker_connections 1024;
}

http {
    lua_package_path "/usr/local/openresty/lualib/?.lua;;";
    resolver 127.0.0.11;  # Docker's internal DNS
    lua_shared_dict openidc_cache 10m;

    upstream settings_service_upstream {
        server settings_service:3000;
    }

    upstream shop_service_upstream {
        server shop_service:3000;
    }

    # upstream invoice_service_upstream {
    #     server invoice_service:3000;
    # }

    server {
        listen 80;
        server_name _;

        location /health {
            add_header 'Access-Control-Allow-Origin' '*';
            return 200 "OK";
        }

        # ============================
        # SETTINGS SERVICE
        # ============================
        location /api/settings/ {
            # CORS Preflight
            if ($request_method = 'OPTIONS') {
                add_header 'Access-Control-Allow-Origin' '*';
                add_header 'Access-Control-Allow-Methods' 'GET, POST, PUT, DELETE, OPTIONS';
                add_header 'Access-Control-Allow-Headers' 'Content-Type, Authorization';
                add_header 'Access-Control-Max-Age' 1728000;
                add_header 'Content-Length' 0;
                add_header 'Content-Type' 'text/plain charset=UTF-8';
                return 204;
            }

            access_by_lua_block {
                local openidc = require("resty.openidc")
                local opts = {
                    discovery = "http://keycloak:8080/realms/myapp-realm/.well-known/openid-configuration",
                    client_id = "myapp-api",
                    client_secret = "",
                    ssl_verify = "no",
                    token_signing_alg_values_expected = "RS256",
                    accept_none_alg = false,
                    scope = "openid profile email",
                    redirect_uri = "http://nginx/auth/callback",
                    session_checks_enabled = false,
                    use_jwks_uri = true,
                    cache_jwks_uri = true,
                    cache_userinfo = true,
                    renew_access_token_on_expiry = false
                }

                local res, err = openidc.bearer_jwt_verify(opts)
                if err then
                    ngx.status = ngx.HTTP_UNAUTHORIZED
                    ngx.header['Access-Control-Allow-Origin'] = '*'
                    ngx.header['Access-Control-Allow-Headers'] = 'Content-Type, Authorization'
                    ngx.header['Content-Type'] = 'application/json'
                    ngx.say('{"error":"Unauthorized"}')
                    ngx.exit(ngx.HTTP_UNAUTHORIZED)
                end

                ngx.req.set_header("X-User-ID", res.sub or "")
                ngx.req.set_header("X-User-Roles", table.concat(res.realm_access and res.realm_access.roles or {}, ","))
                ngx.req.set_header("X-Authenticated-User", res.preferred_username or res.sub or "")
            }

            rewrite ^/api/settings/?(.*)$ /$1 break;

            proxy_pass http://settings_service_upstream;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
            proxy_set_header Authorization $http_authorization;
            proxy_pass_header Authorization;

            # Always allow CORS in responses
            add_header 'Access-Control-Allow-Origin' '*' always;
            add_header 'Access-Control-Allow-Headers' 'Content-Type, Authorization' always;
        }

        # ============================
        # SHOP SERVICE
        # ============================
        location /api/shop/ {
            if ($request_method = 'OPTIONS') {
                add_header 'Access-Control-Allow-Origin' '*';
                add_header 'Access-Control-Allow-Methods' 'GET, POST, PUT, DELETE, OPTIONS';
                add_header 'Access-Control-Allow-Headers' 'Content-Type, Authorization, X-User-ID';
                add_header 'Access-Control-Max-Age' 1728000;
                add_header 'Content-Length' 0;
                add_header 'Content-Type' 'text/plain charset=UTF-8';
                return 204;
            }

            access_by_lua_block {
                local openidc = require("resty.openidc")
                local opts = {
                    discovery = "http://keycloak:8080/realms/myapp-realm/.well-known/openid-configuration",
                    client_id = "myapp-api",
                    client_secret = "",
                    ssl_verify = "no",
                    token_signing_alg_values_expected = "RS256",
                    accept_none_alg = false,
                    scope = "openid profile email",
                    redirect_uri = "http://nginx/auth/callback",
                    session_checks_enabled = false,
                    use_jwks_uri = true,
                    cache_jwks_uri = true,
                    cache_userinfo = true,
                    renew_access_token_on_expiry = false
                }

                local res, err = openidc.bearer_jwt_verify(opts)
                if err then
                    ngx.status = ngx.HTTP_UNAUTHORIZED
                    ngx.header['Access-Control-Allow-Origin'] = '*'
                    ngx.header['Access-Control-Allow-Headers'] = 'Content-Type, Authorization'
                    ngx.header['Content-Type'] = 'application/json'
                    ngx.say('{"error":"Unauthorized"}')
                    ngx.exit(ngx.HTTP_UNAUTHORIZED)
                end

                ngx.req.set_header("X-User-ID", res.sub or "")
                ngx.req.set_header("X-User-Roles", table.concat(res.realm_access and res.realm_access.roles or {}, ","))
                ngx.req.set_header("X-Authenticated-User", res.preferred_username or res.sub or "")
            }

            rewrite ^/api/shop/?(.*)$ /$1 break;

            proxy_pass http://shop_service_upstream;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
            proxy_set_header Authorization $http_authorization;
            proxy_pass_header Authorization;

            proxy_read_timeout 1800s;
            proxy_connect_timeout 1800s;
            proxy_send_timeout 1800s;

            add_header 'Access-Control-Allow-Origin' '*' always;
            add_header 'Access-Control-Allow-Headers' 'Content-Type, Authorization ,x-user-id' always;
        }

        # ============================
        # INVOICE SERVICE
        # ============================
        # location /api/invoices/ {
        #     if ($request_method = 'OPTIONS') {
        #         add_header 'Access-Control-Allow-Origin' '*';
        #         add_header 'Access-Control-Allow-Methods' 'GET, POST, PUT, DELETE, OPTIONS';
        #         add_header 'Access-Control-Allow-Headers' 'Content-Type, Authorization';
        #         add_header 'Access-Control-Max-Age' 1728000;
        #         add_header 'Content-Length' 0;
        #         add_header 'Content-Type' 'text/plain charset=UTF-8';
        #         return 204;
        #     }

        #     access_by_lua_block {
        #         local openidc = require("resty.openidc")
        #         local opts = {
        #             discovery = "http://keycloak:8080/realms/myapp-realm/.well-known/openid-configuration",
        #             client_id = "myapp-api",
        #             client_secret = "",
        #             ssl_verify = "no",
        #             token_signing_alg_values_expected = "RS256",
        #             accept_none_alg = false,
        #             scope = "openid profile email",
        #             redirect_uri = "http://nginx/auth/callback",
        #             session_checks_enabled = false,
        #             use_jwks_uri = true,
        #             cache_jwks_uri = true,
        #             cache_userinfo = true,
        #             renew_access_token_on_expiry = false
        #         }

        #         local res, err = openidc.bearer_jwt_verify(opts)
        #         if err then
        #             ngx.status = ngx.HTTP_UNAUTHORIZED
        #             ngx.header['Access-Control-Allow-Origin'] = '*'
        #             ngx.header['Access-Control-Allow-Headers'] = 'Content-Type, Authorization'
        #             ngx.header['Content-Type'] = 'application/json'
        #             ngx.say('{"error":"Unauthorized"}')
        #             ngx.exit(ngx.HTTP_UNAUTHORIZED)
        #         end

        #         ngx.req.set_header("X-User-ID", res.sub or "")
        #         ngx.req.set_header("X-User-Roles", table.concat(res.realm_access and res.realm_access.roles or {}, ","))
        #         ngx.req.set_header("X-Authenticated-User", res.preferred_username or res.sub or "")
        #     }

        #     rewrite ^/api/invoices/?(.*)$ /$1 break;

        #     proxy_pass http://invoice_service_upstream;
        #     proxy_set_header Host $host;
        #     proxy_set_header X-Real-IP $remote_addr;
        #     proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        #     proxy_set_header X-Forwarded-Proto $scheme;
        #     proxy_set_header Authorization $http_authorization;
        #     proxy_pass_header Authorization;

        #     proxy_read_timeout 1800s;
        #     proxy_connect_timeout 1800s;
        #     proxy_send_timeout 1800s;

        #     add_header 'Access-Control-Allow-Origin' '*' always;
        #     add_header 'Access-Control-Allow-Headers' 'Content-Type, Authorization' always;
        # }
    }
}
