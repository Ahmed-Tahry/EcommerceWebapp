events {
    worker_connections 1024;
}

http {
    lua_package_path "/usr/local/openresty/lualib/?.lua;;";
    resolver 127.0.0.11;  # Docker's internal DNS

    server {
        listen 80;
        server_name localhost;

        location / {
            access_by_lua_block {
                local opts = {
                    discovery = "http://keycloak-server:8080/realms/myapp-realm/.well-known/openid-configuration",
                    client_id = "myapp-api",
                    client_secret = "",  -- Public client
                    ssl_verify = "no",    -- Disable for testing
                    token_signing_alg_values_expected = "RS256",
                    accept_none_alg = false,
                    scope = "openid profile email",
                    redirect_uri = "http://localhost:8180/realms/myapp-realm/protocol/openid-connect/auth",
                    redirect_uri_scheme = "http"
                }

                -- Validate JWT from Authorization header
                local res, err = require("resty.openidc").bearer_jwt_verify(opts)
                if err then
                    ngx.log(ngx.ERR, "JWT validation failed: ", err)
                    ngx.exit(ngx.HTTP_UNAUTHORIZED)
                end

                -- Forward claims to microservice
                ngx.req.set_header("X-User-ID", res.sub or "")
                ngx.req.set_header("X-User-Roles", table.concat(res.realm_access.roles or {}, ","))
            }

            proxy_pass http://mock-service:80/get;
        }

        location /health {
            return 200 "OK";
        }
    }
}